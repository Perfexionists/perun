{#- NOTE: Probed mode doesn't support thread IDs - the PIN_GetTid() will return process ID instead, however to preserve the output format it is used#}
// Default analysis function for routines without collecting arguments
VOID PIN_FAST_ANALYSIS_CALL routineAnalysis(UINT32 routineMetadataIndex{% if not probed %}, THREADID tid{% endif %}, UINT32 location){
    UINT64 timeStamp = 0;
    PIN_MutexLock(&dynamicDataLock);
    OS_Time(&timeStamp);
    dynamicData << Granularity::G_RTN << location << 0  // Information about granularity and location - 3 flags (last empty)
                << ";" << routineMetadataIndex  // Routine ID
                << ";" << {% if probed %}PIN_GetTid(){% else %}tid{% endif %}  // Thread ID
                << ";" << PIN_GetPid()  // Process ID
                << ";" << timeStamp  // Time stamp
                << std::endl;
    dynamicData.flush();
    PIN_MutexUnlock(&dynamicDataLock);
}

{%- if collect_basic_block %}
{#- NOTE: Probed mode doesn't support lower granularity than routines, therefore this part doesn't need to handle probed mode differences #}
// Default analysis function for basic blocks
VOID PIN_FAST_ANALYSIS_CALL basicBlockAnalysis(ADDRINT basicBlockId, THREADID tid, UINT32 location, UINT32 isFunctionEnd) {
    UINT64 timeStamp;
    PIN_MutexLock(&dynamicDataLock);
    OS_Time(&timeStamp);
    dynamicData << Granularity::G_RTN << location << isFunctionEnd  // Information about granularity and location - 3 flags
                << ";" << basicBlockId  // Basic block ID - address
                << ";" << tid  // Thread ID
                << ";" << PIN_GetPid()  // Process ID
                << ";" << timeStamp  // Time stamp
                << std::endl;
    dynamicData.flush();
    PIN_MutexUnlock(&dynamicDataLock);
}
{% endif -%}

{%- if collect_arguments %}
// --- Analysis functions for routines with argument collection ---
{%- for function in function_table %}
VOID PIN_FAST_ANALYSIS_CALL routineAnalysisBefore_{{ function.name }}(UINT32 routineMetadataIndex{% if not probed %}, THREADID tid{% endif %}{% for arg in function.arguments %}, {{ arg.type }} *arg{{ arg.index }}{% endfor %}){
    UINT64 timeStamp = 0;
    PIN_MutexLock(&dynamicDataLock);
    OS_Time(&timeStamp);
    dynamicData << Granularity::G_RTN << Location::AFTER << 0  // Information about granularity and location - 3 flags (last empty)
                << ";" << routineMetadataIndex  // Routine ID
                << ";" << {% if probed %}PIN_GetTid(){% else %}tid{% endif %}  // Thread ID
                << ";" << PIN_GetPid()  // Process ID
                << ";" << timeStamp  // Time stamp
                {% for arg in function.arguments -%}
                << ";" << *arg{{ arg.index }}  // Argument of type {{ arg.type }}
                {%- endfor %}
                << std::endl;
    dynamicData.flush();
    PIN_MutexUnlock(&dynamicDataLock);
}
{%- endfor %}
{%- endif %}
