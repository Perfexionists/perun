[build-system]
requires = ["setuptools>=60", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "perun-toolsuite"
description = "Perun: Lightweight Performance Version System"
version = "0.21.6"
requires-python = ">=3.9"
readme = "README.md"
license = { file = "LICENSE" }
authors = [
    {name = "Tomas Fiedor", email = "TomasFiedor@gmail.com"},
    {name = "Jiri Pavela", email = "Jirka.Pavela@gmail.com"},
    {name = "Radim Podola", email = "rpodola@gmail.com"},
    {name = "Simon Stupinsky", email = "simondestupinsky@gmail.com"},
    {name = "Matus Liscinsky"},
    {name = "Peter Mocary"},
    {name = "Ondrej Michal"},
    {name = "Vojtech Hajek"},
    {name = "Vladimir Hucovic"}
]
dependencies = [
    # CLI
    "click>=8.1",

    # VCS integration
    "GitPython>=3.1.30",
    "gitdb>=4.0.10",

    # String / text utilities
    "Faker>=19.3",
    "ruamel.yaml>=0.17",
    "Jinja2>=3.1",

    # File analysis
    "python-magic>=0.4",
    "angr>=9.2",

    # Science / math / statistics / ML
    "numpy>=1.24",
    "pandas>=2.0",
    "statsmodels>=0.14",
    "scikit-learn>=1.3",
    "scipy>=1.10", # 1.11+ dropped support for Python 3.8
    "networkx>=3.1",

    # Plotting / visualization / output
    "bokeh>=3.1", # 3.2+ dropped support for Python 3.8
    "matplotlib>=3.7",
    "termcolor>=2.4",
    "tabulate>=0.9",
    "holoviews>=1.17",

    # Transitive dependencies that we need to limit for some reason
    "kiwisolver!=1.4.5", # matplotlib dep, 1.4.5 does not work when lazy-importing matplotlib
]
# (1) Optional dependencies are made dynamic so that we can reuse them in tox. The goal is to have each
# dependency and its version constraints specified only once to avoid inconsistencies.
dynamic = ["optional-dependencies"]


[project.urls]
Repository = "https://github.com/Perfexionists/perun.git"
Demonstration = "https://www.fit.vutbr.cz/research/groups/verifit/tools/perun-demo/"
Changelog = "https://github.com/Perfexionists/perun/blob/master/CHANGELOG.rst"

[project.scripts]
perun = "perun.cli:launch_cli"

# A flat-level package with multiple directories, we need to specify the python module manually
# See https://stackoverflow.com/questions/72294299/multiple-top-level-packages-discovered-in-a-flat-layout
[tool.setuptools]
py-modules = ["perun"]
package-dir = {"perun" = "perun"}

[tool.setuptools.dynamic]
# Setuptools fails for nested requirements file when installed as `pip install .`, so sadly no
# simple "dev" optional dependency
optional-dependencies.test = { file = ["requirements_test.txt"] }
optional-dependencies.typing = { file = ["requirements_typing.txt"] }
optional-dependencies.lint = { file = ["requirements_lint.txt"] }
optional-dependencies.docs = { file = ["requirements_docs.txt"] }


[tool.setuptools.packages.find]
where = ["."]
include = [
    "perun",
    "perun*",
]
namespaces = true

[tool.setuptools.package-data]
perun = [
    "view/flamegraph/flamegraph.pl",
    "collect/memory/malloc.so",
    "collect/bounds/bin/**",
    "collect/complexity/cpp_sources/*",
    "collect/complexity/lib/*",
    "templates/*",
    "../requirements_*.txt",
]


# Mypy configuration
# ----------------------
[tool.mypy]
plugins = [
    "numpy.typing.mypy_plugin"
]
exclude = [
    ".git",
    ".mypy_cache",
    ".tox",
    "build",
    "docs",
    "perun.egg-info",
    "perun_toolsuite.egg-info",
    "venv",
    # Fixme: Temporary exclude
    "perun/collect/trace"
]
disallow_incomplete_defs = true
disallow_any_generics = true
no_implicit_optional = true
no_implicit_reexport = true
strict_equality = true
warn_redundant_casts = true
warn_unused_ignores = true

# Some packages are not shipping type hints yet, ignore the 'missing import' errors
[[tool.mypy.overrides]]
module = [
    "networkx.*",
    "matplotlib.*",
    "scipy.*",
    "sklearn.*",
    "statsmodels.*",
    "holoviews.*",
    "bcc.*",
]
ignore_missing_imports = true

# Ignore thirdparty package as it contains ported code that is hard to type
[[tool.mypy.overrides]]
module = [
    "perun.thirdparty.*"
]
ignore_errors = true

# Fixme: Temporary, we omit trace from checking
[[tool.mypy-overrides]]
module = [
    "perun.collect.trace.*"
]
ignore_errors = true
follow_imports = "skip"

# Pylint configuration
# --------------------
[tool.pylint]
ignore-paths = [
    "perun/thirdparty/*"
]


# Pytest configuration
# --------------------
[tool.pytest.ini_options]
addopts = "-p no:warnings -p no:logging"
norecursedirs = [
    "case-studies",
    "venv",
    "docs",
    "*.egg-info",
    ".git",
    ".tox",
    "build",
    ".mypy_cache",
    "perun/thirdparty"
]

# Coverage configuration
# ----------------------
[tool.coverage.run]
source = [
    "perun",
]
omit = [
    "tests/*",
    "perun/collect/trace/*",
    "perun/thirdparty/*"
]

[tool.coverage.report]
exclude_also = [
    # Exclude type checking specific lines, that are never executed
    "if TYPE_CHECKING:",

    # Exclude protocols, that are used for type checking
    "class CallableDetectionMethod(Protocol):",
    "class Comparable(Protocol):",

    # Exclude overloads, that are used for type checking
    "@overload",

    # Not implemented asserst are omitted
    "assert NotImplementedError(.*)",
]

# Formatting configuration
# ----------------------
[tool.black]
target-version = [
    "py39",
    "py310",
    "py311"
]
line-length = 100

